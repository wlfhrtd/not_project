{% extends 'base.html.twig' %}

{% block title %}Edit Order{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        $(document).ready(function () {
            // Get the container (div/ul/table/form-group) that holds the collection of items
            let $collectionHolder = $('div.items');
            // prepare view for loaded entity
            $collectionHolder.find('div.justify-content-start').each(function (index, item) {
                itemTotal(index, item); // item_total_price calc; all required fields loaded from backend

                addCalcItemPrice($(this));
                addItemFormDeleteLink($(this));
                addAjaxProduct($(this));
                $(this).find('.item_quantity').attr('readonly', false);
            })

            /*
            count the current form inputs we have (e.g. 2; 0 for action new) in container
            use that as the new index when inserting a new item
             */
            $collectionHolder.data('index', $collectionHolder.find('input').length);

            $('body').on('click', '.btn_add_item', function(e) {
                let $collectionHolderClass = $(e.currentTarget).data('collectionHolderClass');
                // add a new item form
                addFormToCollection($collectionHolderClass);
            })
        })

        function itemTotal(index, item) {
            let price = parseFloat($(item).find('#order_cart_items_' + index + '_price').val());
            let quantity = parseInt($(item).find('#order_cart_items_' + index + '_quantity').val());
            if (price && quantity) {
                $(item).find('#order_cart_items_' + index + '_item_total_price').val(price * quantity);
            }
        }

        function addFormToCollection($collectionHolderClass) {
            // Get the container that holds the collection of items
            let $collectionHolder = $('.' + $collectionHolderClass);
            // Get the data-prototype
            let prototype = $collectionHolder.data('prototype');
            // get the new index
            let index = $collectionHolder.data('index');

            let newForm = prototype;

            /*
            need this if haven't set 'label' => false for entries in form
            replace '__name__label__' in the prototype's HTML to
            instead be a number based on how many items we have
            newForm = newForm.replace(/__name__label__/g, index);
             */

            /*
            replace '__name__' in the prototype's HTML to
            instead be a number based on how many items we have
             */
            newForm = newForm.replace(/__name__/g, index);
            // increase the index with one for the next item
            $collectionHolder.data('index', index + 1);
            // display the form on the page with desired tag, before the btn_add_item
            let $newFormItem = $('<p></p>').append(newForm);

            addCalcItemPrice($newFormItem);

            addItemFormDeleteLink($newFormItem);

            addAjaxProduct($newFormItem);

            /*
            .select2entity() call needed when using collections and/or prototype;
            also readonly handling just to prevent some NaNs
             */
            let $select2field = $newFormItem.find('.select2entity').last().select2entity();
            $select2field.on('select2:select', function () {
                $newFormItem.find('.item_quantity').attr('readonly', false);
            });
            $select2field.on('select2:clearing', function () {
                $newFormItem.find('.item_quantity').val(null);
                $newFormItem.find('.item_quantity').attr('readonly', true);
                $newFormItem.find('.quantity_in_stock').val(null);
                $newFormItem.find('.product_price').val(null);
                $newFormItem.find('.item_total_price').val(null);
                orderTotal();
            })
            // add the new form at the end of the container
            $collectionHolder.append($newFormItem);
        }

        function addItemFormDeleteLink($newFormItem) {
            // let $removeFormButton = $('<button type="button" class="btn btn-danger">Delete</button>');
            // $newFormItem.append($removeFormButton);

            $newFormItem.find('.btn_delete').on('click', function() {
                // recalculate order total after item remove
                $newFormItem.remove();
                orderTotal();
            });
        }

        function addAjaxProduct($newFormItem) {
            $newFormItem.find('select').on('change', function() {
                let id = $newFormItem.find('select').val();
                let dataId = { 'id': id };
                $.ajax({
                    type    :   'GET',
                    url     : "{{ path('find_product_one') }}",
                    dataType:   'json',
                    data    :   dataId,
                    success:function(data){
                        $newFormItem.find('.product_price').val(data.price);
                        $newFormItem.find('.quantity_in_stock').val(data.quantityInStock);
                    }
                });
            });
        }

        // order total price
        function orderTotal() {
            let totalOrderPrice = 0;
            $('.item_total_price').each(function (index, item) {
                if ($(item).val()) {
                    totalOrderPrice += parseFloat($(item).val());
                }
            })
            $('#order_total').val(totalOrderPrice);
        }

        function addCalcItemPrice($newFormItem) {
            $newFormItem.find('.item_quantity').on('change', function () {
                let price = parseFloat($newFormItem.find('.product_price').val());
                let quantity = parseInt($newFormItem.find('.item_quantity').val());
                let stock = parseInt($newFormItem.find('.quantity_in_stock').val());

                if (quantity < 0) {
                    quantity = 0;
                    $newFormItem.find('.item_quantity').val(0);
                }

                if (quantity > stock) {
                    quantity = stock;
                    $newFormItem.find('.item_quantity').val(stock);
                }
                // single item total price
                if (price && quantity) {
                    $newFormItem.find('.item_total_price').val(price * quantity);
                }
                // order total price
                orderTotal();
            });
        }

    </script>
{% endblock%}

{% block body %}
    <h1>Edit Order</h1>

    {{ include('order/_form.html.twig', {'button_label': 'Update'}) }}

    <a href="{{ path('app_order_index') }}" class="btn btn-secondary">back to list</a>

    {{ include('order/_cancel_form.html.twig') }}
{% endblock %}
